* 工厂模式
    function createPerson(name,age,job) {
          var o = new Object();
          o.name = name;
          o.age = age;
          o.job = job;
          o.sayName = function () {
              console.log("bibibi")
          };
          return o;
      }
     问题:
     1.在于没有解决对象识别问题 the factory pattern didn ’ t address the issue of object identification，即使用instanceof 运算符检验，其并不属于createPerson类
     2.其为每个对象都创建了相同的函数属性，占用了过多的空间
     

* 构造函数模式
     function  Person(name,age,job) {
          this.name = name;
          this.age = age;
          this.job = job;
          this.sayName = function () {
              console.log(this.name)
          };
      }
      var person1 = new Person("","","");
      var person2 = new Person("","","");
      person1 instanceof Person; //true
      person2 instanceof Person; //true
      
      问题:
      person1.sayName == person2.sayName //false
      每个方法都要在每个实例上重新创建.

* 原型模式
      function  Person(name,age,job) {
      }
      Person.prototype = {
          constructor : Person,
          name : "Nicholas",
          age : 29,
          job : "Software",
          sayName :function () {
              console.log(this.name)
          }
      };
      
      问题:
      因为所有属性都是共享的,对于引用类型值的属性来说,引用类型值的修改会影响所有实例.

* 组合使用构造函数模式和原型模式
      function  Person(name,age,job) {
            this.name = name;
            this.age = age;
            this.job = job;
            this.friends = ["tom","jerry"];
        }
        Person.prototype = {
            constructor : Person,
            sayName :function () {
                console.log(this.name)
            }
        };
        目前使用最广泛的方法.
      
